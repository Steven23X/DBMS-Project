-- Cerinta 4
-- Crearea secventei pentru cheile primare.

create sequence secventa_techflow
start with 1
increment by 1
maxvalue 10000
minvalue 1
nocycle
nocache;

-- 1 tabel MAGAZINE

create table magazine (
    id_magazin number(4),
    nume_magazin varchar2(30) constraint nn_nume_magazin not null,
    adresa_magazin varchar2(40) constraint nn_adresa_magazin not null,
    
    constraint pk_id_magazin primary key(id_magazin)
);

-- 2 tabel ANGAJATI

create table angajati (
    id_angajat number(4),
    nume_angajat varchar2(50) constraint nn_nume_angajat not null,
    prenume_angajat varchar2(50) constraint nn_prenume_angajat not null,
    email_angajat varchar2(50),
    salariu_angajat number(10,2) constraint nn_salariu_angajat not null,
    job_angajat varchar2(50),
    id_magazin number(4),
    
    constraint pk_id_angajat primary key(id_angajat),
    constraint fk_id_magazin foreign key(id_magazin)
    references magazine(id_magazin)
);

-- 3 tabel PRODUCATORI

create table producatori (
    id_producator number(4),
    nume_producator varchar2(50) constraint nn_nume_producator not null,
    tara_producator varchar(50),
    
    constraint pk_id_producator primary key(id_producator)
);    

-- 4 tabel CATEGORII

create table categorii (
    id_categorie number(4),
    nume_categorie varchar2(50) constraint nn_nume_categorie not null,
    descriere_categorie varchar2(200),
    
    constraint pk_id_categorie primary key(id_categorie)
);

-- 5 tabel PRODUSE

create table produse (
    id_produs number(4),
    nume_produs varchar2(50) constraint nn_nume_produs not null,
    descriere_produs varchar2(200),
    pret_produs number(10,2),
    stoc_produs number(3),
    id_producator number(4),
    id_categorie number(4),
    
    constraint pk_id_produs primary key(id_produs),
    constraint fk_id_producator foreign key(id_producator)
    references producatori(id_producator),
    constraint fk_id_categorie foreign key(id_categorie)
    references categorii(id_categorie)
);

-- 6 tabel PRODUSE_MAGAZINE

create table produse_magazine (
    id_produs number(4),
    id_magazin number(4),
    
    constraint pk_id_produs_id_magazin primary key(id_produs,id_magazin),
    constraint fk_id_produs_pm foreign key(id_produs)
    references produse(id_produs),
    constraint fk_id_magazin_pm foreign key(id_magazin)
    references magazine(id_magazin)
);

-- 7 tabel PLATI

create table plati (
    id_plata number(4),
    total_plata number(10,2) constraint nn_total_plata not null,
    tip_plata varchar2(50) constraint nn_tip_plata not null,
    
    constraint pk_id_plata primary key(id_plata)
);

-- 8 tabel TRANSPORT

create table transport (
    id_transport number(4),
    firma_transport varchar2(50) constraint nn_firma_transport not null,
    cost_transport number(10,2) constraint nn_cost_transport not null,
    
    constraint pk_id_transport primary key (id_transport)
);

-- 9 tabel CLIENTI

create table clienti (
    id_client number(4),
    nume_client varchar2(50),
    prenume_client varchar2(50),
    email_client varchar2(35),
    telefon_client varchar2(20),
    data_inregistrare date,
    
    constraint pk_id_client primary key (id_client)
);

-- 10 tabel COMENZI

create table comenzi (
    id_comanda number(4),
    data_plasare date,
    status_comanda varchar2(50),
    id_client number(4),
    id_plata number(4),
    id_transport number(4),
    
    constraint pk_id_comanda primary key (id_comanda),
    constraint fk_id_client foreign key (id_client)
    references clienti(id_client),
    constraint fk_id_plata foreign key (id_plata)
    references plati(id_plata),
    constraint fk_id_transport foreign key (id_transport)
    references transport(id_transport)
);

-- 11 tabel PRODUSE_COMENZI

create table produse_comenzi (
    id_produs number(4),
    id_comanda number(4),
    
    constraint pk_id_produs_id_comanda primary key(id_produs,id_comanda),
    constraint fk_id_produs_pc foreign key(id_produs)
    references produse(id_produs),
    constraint fk_id_comanda_pc foreign key(id_comanda)
    references comenzi(id_comanda)
);

-- 12 tabel WISHLIST

create table wishlist (
    id_wishlist number(4),
    data_adaugare date,
    id_client number(4),
    
    constraint pk_id_wishlist primary key (id_wishlist),
    constraint fk_id_client_wl foreign key (id_client)
    references clienti(id_client)
);

-- 13 tabel PRODUSE_WISHLIST

create table produse_wishlist (
    id_produs number(4),
    id_wishlist number(4),
    
    constraint pk_id_produs_id_wishlist primary key(id_produs,id_wishlist),
    constraint fk_id_produs_pw foreign key(id_produs)
    references produse(id_produs),
    constraint fk_id_wishlist_pw foreign key(id_wishlist)
    references wishlist(id_wishlist)
);

-- 14 tabel RECENZII

create table recenzii (
    id_recenzie number(4),
    nota_recenzie number(2,1),
    id_client number(4),
    id_produs number(4),
    
    constraint pk_id_recenzie primary key (id_recenzie),
    constraint fk_id_client_rz foreign key (id_client)
    references clienti(id_client),
    constraint fk_id_produs_rz foreign key (id_produs)
    references produse(id_produs)
);

-- Cerinta 5
-- Inserarea datelor

-- 1 tabel MAGAZINE

insert into magazine
values (secventa_techflow.nextval, 'TechFlow Red', 'Bacau');

insert into magazine
values (secventa_techflow.nextval, 'TechFlow Blue', 'Bucuresti');

insert into magazine
values (secventa_techflow.nextval, 'TechFlow Black', 'Cluj');

insert into magazine
values (secventa_techflow.nextval, 'TechFlow Green', 'Iasi');

insert into magazine
values (secventa_techflow.nextval, 'TechFlow Yellow', 'Brasov');

select * from magazine;

-- 2 tabel ANGAJATI

insert into angajati
values (secventa_techflow.nextval, 'Popescu', 'Ion', 'ion.popescu@example.com', 2500.00, 'Casier', 1);

insert into angajati
values (secventa_techflow.nextval, 'Ionescu', 'Maria', 'maria.ionescu@example.com', 3000.00, 'Manager', 1);

insert into angajati
values (secventa_techflow.nextval, 'Popa', 'Andrei', 'andrei.popa@example.com', 2200.00, 'Casier', 2);

insert into angajati
values (secventa_techflow.nextval, 'Dragomir', 'Elena', 'elena.dragomir@example.com', 2800.00, 'Manager', 2);

insert into angajati
values (secventa_techflow.nextval, 'Georgescu', 'Alexandru', 'alexandru.georgescu@example.com', 2400.00, 'Casier', 3);

insert into angajati
values (secventa_techflow.nextval, 'Gheorghe', 'Mihai', 'mihai.gheorghe@example.com', 3100.00, 'Manager', 3);

insert into angajati
values (secventa_techflow.nextval, 'Pop', 'Adrian', 'adrian.pop@example.com', 2300.00, 'Casier', 4);

insert into angajati
values (secventa_techflow.nextval, 'Vasile', 'Ioana', 'ioana.vasile@example.com', 2900.00, 'Manager', 4);

insert into angajati
values (secventa_techflow.nextval, 'Stan', 'Daniel', 'daniel.stan@example.com', 2600.00, 'Casier', 5);

insert into angajati
values (secventa_techflow.nextval, 'Nistor', 'Cristina', 'cristina.nistor@example.com', 3300.00, 'Manager', 5);

select * from angajati;

-- 3 tabel PRODUCATORI (inserare explicita)

insert into producatori (id_producator, nume_producator, tara_producator)
values (secventa_techflow.nextval, 'Stentor', 'Romania');

insert into producatori (id_producator, nume_producator, tara_producator)
values (secventa_techflow.nextval, 'PC Master', 'Germania');

insert into producatori (id_producator, nume_producator, tara_producator)
values (secventa_techflow.nextval, 'HardwareCO', 'Franta');

insert into producatori (id_producator, nume_producator, tara_producator)
values (secventa_techflow.nextval, 'VideoMaster', 'Italia');

insert into producatori (id_producator, nume_producator, tara_producator)
values (secventa_techflow.nextval, 'SiSoft', 'Spania');

select * from producatori;

-- 4 tabel CATEGORII

insert into categorii
values (secventa_techflow.nextval, 'Placi de baza', 'Categorie dedicata placilor de baza');

insert into categorii
values (secventa_techflow.nextval, 'Procesoare', 'Categorie dedicata procesoarelor');

insert into categorii
values (secventa_techflow.nextval, 'Placi video', 'Categorie dedicata placilor video');

insert into categorii
values (secventa_techflow.nextval, 'Memorii RAM', 'Categorie dedicata modulelor de memorie RAM');

insert into categorii
values (secventa_techflow.nextval, 'Stocare ROM', 'Categorie dedicata solutiilor de stocare');

insert into categorii
values (secventa_techflow.nextval, 'Microfoane', 'Categorie dedicata microfoanelor');

select * from categorii;

-- 5 tabel PRODUSE

insert into produse
values (secventa_techflow.nextval, 'ASUS ROG Strix X570-E Gaming', 'Placă de bază ATX pentru gaming, compatibilă cu procesoare AMD Ryzen', 1599.99, 10, 16, 21);

insert into produse
values (secventa_techflow.nextval, 'Intel Core i9-10900K', 'Procesor Intel de ultimă generație cu 10 nuclee și 20 fire de execuție', 2899.99, 5, 16, 22);

insert into produse
values (secventa_techflow.nextval, 'NVIDIA GeForce RTX 3080', 'Placă video high-end pentru gaming, cu 10 GB memorie GDDR6X', 5299.99, 3, 17, 23);

insert into produse
values (secventa_techflow.nextval, 'Corsair Vengeance RGB Pro', 'Modul de memorie DDR4 cu iluminare RGB și capacitate de 16 GB', 699.99, 20, 17, 24);

insert into produse
values (secventa_techflow.nextval, 'Samsung 970 EVO Plus', 'Solid State Drive NVMe cu capacitate de 1 TB și viteză de transfer ridicată', 999.99, 8, 17, 25);

insert into produse
VALUES (secventa_techflow.nextval, 'MSI B450 TOMAHAWK MAX', 'Placă de bază ATX pentru procesoare AMD Ryzen, suportă memorie DDR4', 599.99, 15, 18, 21);

insert into produse
VALUES (secventa_techflow.nextval, 'AMD Ryzen 7 5800X', 'Procesor AMD cu 8 nuclee și 16 fire de execuție, frecvență de bază 3.8 GHz', 1999.99, 7, 18, 22);

insert into produse
VALUES (secventa_techflow.nextval, 'Gigabyte GeForce GTX 1660 SUPER OC', 'Placă video performantă pentru gaming, 6 GB memorie GDDR6', 1799.99, 10, 19, 23);

insert into produse
VALUES (secventa_techflow.nextval, 'RAM Kingston HyperX Fury RGB', 'Modul de memorie DDR4 cu iluminare RGB și capacitate de 32 GB', 1299.99, 12, 19, 24);

insert into produse
VALUES (secventa_techflow.nextval, 'SSD Western Digital Blue', 'Solid State Drive SATA cu capacitate de 500 GB și viteză de transfer mare', 399.99, 25, 20, 25);

select * from produse;

-- 6 tabel PRODUSE_MAGAZINE

-- Magazinul - TechFlow Red
-- Produs - ASUS ROG Strix X570-E Gaming
insert into produse_magazine
values (26, 1);

-- Produs - Intel Core i9-10900K
insert into produse_magazine
values (27, 1);

-- Magazinul - TechFlow Blue
-- Produs - ASUS ROG Strix X570-E Gaming
insert into produse_magazine
values (26,2);

-- Produs - Corsair Vengeance RGB Pro
insert into produse_magazine
values (29,2);

-- Magazinul - TechFlow Black
-- Produs - Samsung 970 EVO Plus
insert into produse_magazine
values (30,3);

-- Produs - Intel Core i9-10900K
insert into produse_magazine
values (27,3);

-- Magazinul - TechFlow Green
-- Produs - AMD Ryzen 7 5800X
insert into produse_magazine
values (32,4);

-- Produs - Gigabyte GeForce GTX 1660 SUPER OC
insert into produse_magazine
values (33,4);

-- Magazinul - TechFlow Yellow
-- Produs - RAM Kingston HyperX Fury RGB
insert into produse_magazine
values (34,5);

-- Produs - Gigabyte GeForce GTX 1660 SUPER OC
insert into produse_magazine
values (33,5);

select * from produse_magazine;

-- 7 tabel PLATI

-- total_plata id_produs : 26 + 30
insert into plati (id_plata, total_plata, tip_plata)
values (secventa_techflow.nextval, 2598.99, 'Card');

-- total_plata id_produs : 29 + 35 + 31
insert into plati (id_plata, total_plata, tip_plata)
values (secventa_techflow.nextval, 1699.97, 'Numerar');

-- total_plata id_produs : 27 + 34
insert into plati (id_plata, total_plata, tip_plata)
values (secventa_techflow.nextval, 4199.98, 'Transfer bancar');

-- total_plata id_produs : 28 + 31
insert into plati (id_plata, total_plata, tip_plata)
values (secventa_techflow.nextval, 5899.98, 'Card');

-- total_plata id_produs : 29 + 33
insert into plati (id_plata, total_plata, tip_plata)
values (secventa_techflow.nextval, 2499.98, 'Numerar');

select * from plati;

-- 8 tabel TRANSPORT

insert into transport
values (secventa_techflow.nextval, 'Cargus', 100.00);

insert into transport
values (secventa_techflow.nextval, 'Fan Courier', 150.50);

insert into transport
values (secventa_techflow.nextval, 'Same Day', 200.75);

insert into transport
values (secventa_techflow.nextval, 'DPD', 180.25);

insert into transport
values (secventa_techflow.nextval, 'DHL', 220.00);

select * from transport;

-- 9 tabel CLIENTI
insert into clienti
VALUES (secventa_techflow.nextval, 'Avram', 'Gabriela', 'gabriela.avram@example.com', '0776123456', TO_DATE('2023-05-12', 'YYYY-MM-DD'));

insert into clienti
VALUES (secventa_techflow.nextval, 'Constantin', 'Mihai', 'mihai.constantin@example.com', '0787123456', TO_DATE('2023-03-15', 'YYYY-MM-DD'));

insert into clienti
VALUES (secventa_techflow.nextval, 'Dumitru', 'Adriana', 'adriana.dumitru@example.com', '0798123456', TO_DATE('2023-01-14', 'YYYY-MM-DD'));

insert into clienti
VALUES (secventa_techflow.nextval, 'Florescu', 'Valentin', 'valentin.florescu@example.com', '0709123456', TO_DATE('2023-02-13', 'YYYY-MM-DD'));

insert into clienti
VALUES (secventa_techflow.nextval, 'Gheorghe', 'Cristina', 'cristina.gheorghe@example.com', '0710123456', TO_DATE('2023-03-12', 'YYYY-MM-DD'));

insert into clienti
VALUES (secventa_techflow.nextval, 'Popescu', 'Mihai', 'popescu.mihai@example.com', '0710121245', TO_DATE('2024-01-02', 'YYYY-MM-DD'));

insert into clienti
VALUES (secventa_techflow.nextval, 'Pop', 'Alexandra', 'pop.alexandra@example.com', '0710131245', TO_DATE('2024-01-04', 'YYYY-MM-DD'));

select * from clienti;

-- 10 tabel COMENZI

insert into comenzi
values (secventa_techflow.nextval, to_date('2023-05-15', 'YYYY-MM-DD'), 'Noua', 46, 36, 41);

insert into comenzi
values (secventa_techflow.nextval, to_date('2023-05-10', 'YYYY-MM-DD'), 'Confirmata', 47, 37, 41);

insert into comenzi
values (secventa_techflow.nextval, to_date('2023-04-15', 'YYYY-MM-DD'), 'Anulata', 46, 38, 41);

insert into comenzi
values (secventa_techflow.nextval, to_date('2023-05-15', 'YYYY-MM-DD'), 'Noua', 48, 39, 42);

insert into comenzi
values (secventa_techflow.nextval, to_date('2023-05-09', 'YYYY-MM-DD'), 'Confirmata', 49, 40, 44);

select * from comenzi;

-- 11 tabel PRODUSE_COMENZI

insert into produse_comenzi
values (26,51);

insert into produse_comenzi
values (30,51);

insert into produse_comenzi
values (29,52);

insert into produse_comenzi
values (35,52);

insert into produse_comenzi
values (31,52);

insert into produse_comenzi
values (27,53);

insert into produse_comenzi
values (34,53);

insert into produse_comenzi
values (28,54);

insert into produse_comenzi
values (31,54);

insert into produse_comenzi
values (29,55);

insert into produse_comenzi
values (33,55);

select * from produse_comenzi;

-- 12 tabel WISHLIST

insert into wishlist
values (secventa_techflow.nextval, to_date('2023-05-14', 'YYYY-MM-DD'), 46);

insert into wishlist
values (secventa_techflow.nextval, to_date('2023-05-13', 'YYYY-MM-DD'), 47);

insert into wishlist
values (secventa_techflow.nextval, to_date('2023-05-12', 'YYYY-MM-DD'), 48);

insert into wishlist
values (secventa_techflow.nextval, to_date('2023-05-11', 'YYYY-MM-DD'), 49);

insert into wishlist
values (secventa_techflow.nextval, to_date('2023-05-10', 'YYYY-MM-DD'), 50);

select * from wishlist;

-- 13 tabel PRODUSE_WISHLIST

insert into produse_wishlist
values (27,56);

insert into produse_wishlist
values (28,56);

insert into produse_wishlist
values (29,57);

insert into produse_wishlist
values (31,57);

insert into produse_wishlist
values (31,58);

insert into produse_wishlist
values (27,58);

insert into produse_wishlist
values (34,59);

insert into produse_wishlist
values (27,59);

insert into produse_wishlist
values (31,60);

insert into produse_wishlist
values (28,60);

insert into produse_wishlist
values (26,60);

select * from produse_wishlist;

-- 14 tabel RECENZII

insert into recenzii
values (secventa_techflow.nextval, 4.5, 46, 26);

insert into recenzii
values (secventa_techflow.nextval, 3.8, 47, 27);

insert into recenzii
values (secventa_techflow.nextval, 4.2, 48, 28);

insert into recenzii
values (secventa_techflow.nextval, 5.0, 49, 29);

insert into recenzii
values (secventa_techflow.nextval, 3.5, 50, 30);

select * from recenzii;

-- Cerinta 6

-- Pentru primele 5 produse (varray) in ordine alfabetica dupa nume sa se afiseze 
-- codul, numele, pretul, stocul, in ce magazine se afla (t indexat) si recenziile
-- lasate de clienti (t imbr).


create or replace procedure produse_info as

    -- varray de record-uri pentru produse
    type prod_rec is record (
                    cod_prod produse.id_produs%type,
                    nume produse.nume_produs%type,
                    pret produse.pret_produs%type,
                    stoc produse.stoc_produs%type
                    );
    type prod_vec is varray(5) of prod_rec;
    t_prod prod_vec := prod_vec();
    
    -- tablou indexat pentru magazine
    type mag_rec is record (
                    nume magazine.nume_magazin%type,
                    adresa magazine.adresa_magazin%type
                    );
    type mag_ind is table of mag_rec index by binary_integer;
    t_mag mag_ind;
    
    -- tablou imbricat pentru recenzii
    type recenzii_rec is record (
                        nota recenzii.nota_recenzie%type,
                        nume_client clienti.nume_client%type
                        );
    type rec_imbr is table of recenzii_rec;
    t_recenzii rec_imbr := rec_imbr();

begin
    
    dbms_output.put_line('######## Informatii despre produse - magazine - recenzii ########');
    dbms_output.new_line();
    
    -- atribuire produse
    select id_produs,nume_produs,pret_produs,stoc_produs bulk collect into t_prod
    from produse
    order by nume_produs
    fetch first 5 rows only;
    
    for i in t_prod.first..t_prod.last loop
        -- afisare info produs
        dbms_output.put_line('Produsul ' || i);
        dbms_output.put_line('################');
        dbms_output.put_line('Id: ' || t_prod(i).cod_prod || ' Nume: ' || t_prod(i).nume);
        dbms_output.put_line('Pret: ' || t_prod(i).pret || ' Stoc: ' || t_prod(i).stoc);
        dbms_output.put_line('################');
        
        -- atribuire magazine
        select m.nume_magazin,m.adresa_magazin bulk collect into t_mag
        from magazine m
        join produse_magazine pm on (m.id_magazin = pm.id_magazin)
        where pm.id_produs = t_prod(i).cod_prod;
        
        -- afisare info magazin
        if t_mag.count = 0 then
            dbms_output.put_line('Produsul nu se afla intr-un magazin!');
            dbms_output.new_line;
        else
            dbms_output.put_line('Magazine: ');
            for j in t_mag.first..t_mag.last loop
                dbms_output.put_line('Magazinul ' || j);
                dbms_output.put_line('Nume: ' || t_mag(j).nume || ' Adresa: ' || t_mag(j).adresa);
                dbms_output.new_line();
            end loop;
        end if;
        dbms_output.put_line('################');
        
        -- atribuire recenzii
        select r.nota_recenzie,c.nume_client bulk collect into t_recenzii
        from recenzii r
        join clienti c on (r.id_client = c.id_client)
        where r.id_produs = t_prod(i).cod_prod;
        
        -- afisare recenzii
        if t_recenzii.count = 0 then
            dbms_output.put_line('Produsul nu are recenzii!');
            dbms_output.new_line;
        else
            dbms_output.put_line('Recenzii: ');
            for k in t_recenzii.first..t_recenzii.last loop
                dbms_output.put_line('Recenzia ' || k);
                dbms_output.put_line('Nota: ' || t_recenzii(k).nota || ' Nume Client: ' || t_recenzii(k).nume_client);
                dbms_output.new_line();
            end loop;
        end if;
        dbms_output.new_line();
    end loop;
end produse_info;
/

execute produse_info;

-- Cerinta 7

-- Pentru fiecare categorie sa se determine primele 2 produse ordonate descrescator dupa stoc (cursor dinamic). Sa
-- se afiseze detalii despre comenzile care contin produsele determinate anterior (cursor parametrizat).

create or replace procedure comenzi_info as
    
    type com_rec is record (
                    data_plasare comenzi.data_plasare%type,
                    status_comanda comenzi.status_comanda%type,
                    total_plata plati.total_plata%type,
                    tip_plata plati.tip_plata%type                    
                    );
    
    type prod_rec is record (
                    nume produse.nume_produs%type,
                    id_produs produse.id_produs%type
                    );
    
    type t_prod is table of prod_rec
    index by binary_integer;
    v_prod t_prod;
    
    v_com com_rec;
    
    -- cursor dinamic/ expresie cursor
    -- pentru fiecare categorie se determina produsul cu cel mai mare stoc
    cursor categorii_info is
        select id_categorie,nume_categorie,
            cursor(select max(nume_produs),max(id_produs)
                   from produse p
                   where c.id_categorie = p.id_categorie
                   group by p.id_produs
                   order by max(stoc_produs) desc)
        from categorii c;
                    
    -- cursor parametrizat pentru comenzi
    cursor com_info(v_produs produse.id_produs%type) is
        select c.data_plasare,c.status_comanda,p.total_plata,p.tip_plata
        from comenzi c
        join plati p on (c.id_plata = p.id_plata)
        join produse_comenzi pc on (c.id_comanda = pc.id_comanda)
        where pc.id_produs = v_produs
        order by c.data_plasare desc;
        
    v_cursor sys_refcursor;
    
    v_id_categorie categorii.id_categorie%type;
    v_nume_categorie categorii.nume_categorie%type;
    contor number := 1;
begin
    dbms_output.put_line('######## Informatii despre categorii - produse - comenzi - plati ########');
    open categorii_info;
    loop
        fetch categorii_info into v_id_categorie,v_nume_categorie,v_cursor;
        
        exit when categorii_info%notfound;
        dbms_output.put_line('Categoria: ' || v_nume_categorie || ' cu id-ul: ' || v_id_categorie);
        dbms_output.put_line('################');
        fetch v_cursor bulk collect into v_prod limit 2;
        dbms_output.new_line;
        
        if v_prod.count = 0 then
            dbms_output.put_line('Nu exista produse!');
        else
        for i in v_prod.first..v_prod.last loop
            dbms_output.put_line('Produs '||i|| '. '|| v_prod(i).nume);
            dbms_output.put_line('################');
            open com_info(v_prod(i).id_produs);
            loop
                fetch com_info into v_com;
                exit when com_info%notfound;
                dbms_output.put_line('Comanda '||contor);
                dbms_output.put_line('Data Plasare: ' || v_com.data_plasare || ' Status Comanda: ' || v_com.status_comanda);
                dbms_output.put_line('Total Plata: ' || v_com.total_plata || ' Tip Plata: ' || v_com.tip_plata);
                dbms_output.new_line;
                contor := contor + 1;
            end loop;
            
            if com_info%rowcount = 0 then
                dbms_output.put_line('Nu are comenzi!');
            end if;
            close com_info;
            
        contor := 1;
        dbms_output.put_line('################');
        dbms_output.new_line;
        end loop;
        end if;
        
        dbms_output.new_line;
    end loop;
    close categorii_info;
end comenzi_info;
/
execute comenzi_info;

-- Cerinta 8 

-- Sa se returneze comenzile plasate intr-o anumita perioada care nu depasesc un anumit cost de transport si un anumit cost total.
create or replace type t_id_com is table of number;
/
-- returneaza un tablou de id-uri
create or replace function filtrare_comenzi
    (v_data_min date, v_data_max date, v_transport_maxim transport.cost_transport%type, v_cost_total plati.total_plata%type)
return t_id_com is
    v_id_com t_id_com;
    
    data_eroare exception;
    transport_eroare exception;
    cost_total_eroare exception;
    no_comenzi exception;
begin
    
    if v_data_min > v_data_max then
        raise data_eroare;
    end if;
    
    if v_transport_maxim < 0 then
        raise transport_eroare;
    end if;
    
    if v_cost_total < 0 then
        raise cost_total_eroare;
    end if;

    -- folosirea a 3 tabele
    select distinct c.id_comanda bulk collect into v_id_com
    from comenzi c
    join plati p on (c.id_plata = p.id_plata)
    join transport t on (c.id_transport = c.id_transport)
    where c.data_plasare >= v_data_min and c.data_plasare <= v_data_max
    and t.cost_transport <= v_transport_maxim
    and p.total_plata <= v_cost_total;

    if v_id_com.count = 0 then
        raise no_comenzi;
    end if;
    
    return v_id_com;

exception
    when no_comenzi then
        raise_application_error(-20000,'Nu exista comanda cu aceste conditii!');
    when data_eroare then
        raise_application_error(-20001,'Intervalul nu este introdus corect!');
    when transport_eroare then
        raise_application_error(-20002,'Costul transportului nu poate fi negativ!');
    when cost_total_eroare then
        raise_application_error(-20003,'Costul total nu poate fi negativ!');
    when others then
        raise_application_error(-20004,'Alta eroare!');
end filtrare_comenzi;
/

-- caz 1 apel corect
declare
    solutie t_id_com;
begin
    dbms_output.put_line('Comenzi intre 10-15 mai 2023 cu totatul de plata mai mic de 5000');
    dbms_output.put_line('si costul de transport mai mic de 190.');
    solutie := filtrare_comenzi(to_date('10-may-2023', 'dd-mon-yyyy'),to_date('15-may-2023', 'dd-mon-yyyy'),190,5000);
    dbms_output.new_line;
    dbms_output.put_line('Id-uri comenzi care respecta criteriul:');
    for i in solutie.first..solutie.last loop
        dbms_output.put_line(solutie(i)|| ' ');
    end loop;
end;
/

-- caz2 exceptie no_comenzi
-- caz in care nu exista comenzi care sa respecte conditiile
declare
    solutie t_id_com;
begin
    dbms_output.put_line('Comenzi intre 10-15 mai 2022 cu totatul de plata mai mic de 3000');
    dbms_output.put_line('si costul de transport mai mic de 100.');
    dbms_output.new_line;
    solutie := filtrare_comenzi(to_date('10-may-2022', 'dd-mon-yyyy'),to_date('15-may-2022', 'dd-mon-yyyy'),100,3000);
exception
    when others then
        dbms_output.put_line('Eroare cu codul '||SQLCODE|| ' si mesajul ' || SQLERRM);
end;
/

-- caz3 exceptie data_eroare
-- caz in care data minima este mai mare decat data maxima

declare
    solutie t_id_com;
begin
    dbms_output.put_line('Comenzi intre 15-10 mai 2022 cu totatul de plata mai mic de 3000');
    dbms_output.put_line('si costul de transport mai mic de 100.');
    dbms_output.new_line;
    solutie := filtrare_comenzi(to_date('15-may-2022', 'dd-mon-yyyy'),to_date('10-may-2022', 'dd-mon-yyyy'),100,3000);
exception
    when others then
        dbms_output.put_line('Eroare cu codul '||SQLCODE|| ' si mesajul ' || SQLERRM);
end;
/

-- caz4 exceptie transport_eroare 
-- caz in care costul pentru transport maximal este negativ
declare
    solutie t_id_com;
begin
    dbms_output.put_line('Comenzi intre 10-15 mai 2023 cu totatul de plata mai mic de 3000');
    dbms_output.put_line('si costul de transport mai mic de -10.');
    dbms_output.new_line;
    solutie := filtrare_comenzi(to_date('10-may-2022', 'dd-mon-yyyy'),to_date('15-may-2022', 'dd-mon-yyyy'),-10,3000);
exception
    when others then
        dbms_output.put_line('Eroare cu codul '||SQLCODE|| ' si mesajul ' || SQLERRM);
end;
/

-- caz5 exceptie cost_total_eroare
-- caz in care costul total maximal este negativ
declare
    solutie t_id_com;
begin
    dbms_output.put_line('Comenzi intre 10-15 mai 2023 cu totatul de plata mai mic de -50');
    dbms_output.put_line('si costul de transport mai mic de 200.');
    dbms_output.new_line;
    solutie := filtrare_comenzi(to_date('10-may-2022', 'dd-mon-yyyy'),to_date('15-may-2022', 'dd-mon-yyyy'),200,-50);
exception
    when others then
        dbms_output.put_line('Eroare cu codul '||SQLCODE|| ' si mesajul ' || SQLERRM);
end;
/

-- Cerinta 9
-- Definiti un subprogram stocat de tip procedura care sa afiseze numarul de recenzii
-- ,numarul de produse in wishlist,numarul de comenzi si numarul de produse din comenzile
-- neanulate ale clientului al caror nume este dat.
-- De asemenea, sa se afiseze numele si prenumele clientului.

create or replace procedure clienti_info(v_nume_client clienti.nume_client%type)
is
  type info_rec is record (
                        nr_recenzii integer,
                        nr_wishlist integer,
                        nr_comenzi integer,
                        nr_produse_neanulate integer,
                        nume_client clienti.nume_client%type,
                        prenume_client clienti.prenume_client%type
                        );
  l_info info_rec; 

  type nume_client_imbr is table of clienti.nume_client%type;
  t_nume_client nume_client_imbr := nume_client_imbr();
  
begin
  select nume_client bulk collect into t_nume_client
  from clienti
  where nume_client like v_nume_client || '%';
  
  if t_nume_client.count = 0 then
    raise no_data_found;
  elsif t_nume_client.count > 1 then
    raise too_many_rows;
  else
    dbms_output.put_line('Informatii client: ');
    dbms_output.new_line;
    
    -- 6 tabele intr-o comanda sql
    select
    (select count(*) from recenzii r 
     join clienti cl on (cl.id_client = r.id_client) 
     where cl.nume_client like v_nume_client
     )as nr_recenzii,
     (select count(*) from wishlist w 
     join clienti cl on (cl.id_client = w.id_client) 
     where cl.nume_client like v_nume_client) as nr_wishlist,
     (select count(*) from comenzi c 
     join clienti cl on (cl.id_client = c.id_client) 
     where cl.nume_client like v_nume_client)as nr_comenzi,
     (select count(*) from produse p
     join produse_comenzi pc on (pc.id_produs = p.id_produs)
     join comenzi c on (c.id_comanda = pc.id_comanda)
     join clienti cl on (cl.id_client = c.id_client)
     where cl.nume_client like v_nume_client and c.status_comanda <> 'Anulata'
     ) as nr_produse_neanulate,
     cl.nume_client,cl.prenume_client into l_info
    from clienti cl
    where cl.nume_client like v_nume_client;
    
    dbms_output.put_line('Nume: ' || l_info.nume_client);
    dbms_output.put_line('Prenume: ' || l_info.prenume_client);
    dbms_output.new_line;
    dbms_output.put_line('Numar recenzii: ' || l_info.nr_recenzii);
    dbms_output.put_line('Numar produse wishlist: ' || l_info.nr_wishlist);
    dbms_output.put_line('Numar comenzi: ' || l_info.nr_comenzi);
    dbms_output.put_line('Numar produse din comenzile neanulate: ' || l_info.nr_produse_neanulate);
  end if;
exception
    when no_data_found then
        raise_application_error(-20000,'Nu exista client cu acest nume!');
    when too_many_rows then
        raise_application_error(-20001,'Prea multi clienti cu acest string!');
    when others then
        raise_application_error(-20002,'Alta eroare!');
end clienti_info;
/  

-- caz 1 apel corect
begin
 clienti_info('Avram');
exception
 when others then
    dbms_output.put_line('Eroare cu codul '||SQLCODE|| ' si mesajul ' || SQLERRM);
end;
/

-- caz 2 no_data_found (nu exista cu client cu acest nume)
begin
 clienti_info('Huma');
exception
 when others then
    dbms_output.put_line('Eroare cu codul '||SQLCODE|| ' si mesajul ' || SQLERRM);
end;
/

-- caz 3 too_many_rows (pentru Pop => exista Popa si Popescu)
begin
 clienti_info('Pop');
exception
 when others then
    dbms_output.put_line('Eroare cu codul '||SQLCODE|| ' si mesajul ' || SQLERRM);
end;
/

-- Cerinta 10
-- trigger LMD la nivel de comanda care nu permite executarea unui comenzi
-- pe tabelul angajati intre orele 01:00 - 03:00 in ziua de 8 si 9 a
-- lunilor in intervalul [1,9].

create or replace trigger check_angajati
    before insert or delete or update on angajati
declare
    valid number := 1;
begin
    for i in 1..9 loop
        if to_char(sysdate,'dd/mm') = '08/0' || i or to_char(sysdate,'dd/mm') = '07/0' || i then
            valid := 0;
        end if;
    end loop;
    if to_char(sysdate, 'hh24') between 1 and 3
        then valid := 0;
    end if;
    
    if valid = 0 then
        if inserting then
            raise_application_error(-20000,'Inserati date mai tarziu!');
        elsif deleting then
            raise_application_error(-20001,'Stergeti date mai tarziu!');
        else
            raise_application_error(-20002,'Modificati date mai tarziu!');
        end if;
    end if;
end;
/

-- inserare
insert into angajati
values (secventa_techflow.nextval, 'Gabroveanu', 'Ion', 'gabroveanu.ion@example.com', 2500.00, 'Casier', 1);

-- stergere
delete from angajati where id_angajat = 6;

-- modificare
update angajati
set id_angajat = 1000
where id_angajat = 7;


-- Cerinta 11

-- Varianta 1
-- (se va folosi o procedura in trigger)
-- Trigger LMD la nivel de linie care va actualiza automat campul suma_totala
-- din tabelul info_categorii cand se introduce un nou produs, se sterge un produs
-- sau se modifica pretul produsului

-- Tabel info_categorii in care suma_totala reprezinta suma preturilor
-- produselor din categoria respectiva
create table info_categorii
(id number(3) primary key,
nume_categorie varchar2(50),
suma_totala number);

-- adaugare date in tabel
insert into info_categorii
select c.id_categorie,c.nume_categorie,nvl(sum(p.pret_produs),0)
from categorii c, produse p
where c.id_categorie = p.id_categorie(+)
group by c.id_categorie,c.nume_categorie;

select * from info_categorii;

-- procedura care actualizeaza suma_totala din info_categorii
create or replace procedure modificare_suma_categorii
    ( v_id info_categorii.id%type,
      v_suma_totala info_categorii.suma_totala%type
    ) as
begin
    update info_categorii
    set suma_totala = nvl(suma_totala,0) + v_suma_totala
    where id = v_id;
end;
/

-- trigger LMD
create or replace trigger lmd_pret_produs
    after delete or update or insert of pret_produs 
    on produse
    for each row
begin
    
    if deleting then
        -- stergerea unui produs
        modificare_suma_categorii(:old.id_categorie,-1*:old.pret_produs);
    elsif updating then
        -- modificarea unui produs
        modificare_suma_categorii(:old.id_categorie,:new.pret_produs-:old.pret_produs);
    else
        -- adaugarea unui produs
        modificare_suma_categorii(:new.id_categorie,:new.pret_produs);
    end if;
end;
/
select * from info_categorii;
select * from produse;

-- stergere produs
delete from produse where id_produs = 75;

-- modificare produs
update produse
set pret_produs = 1999.99
where id_produs = 27;

-- adaugare produs
insert into produse
values (secventa_techflow.nextval, 'Microfon Test', '-', 1799.99, 25, 16, 71);

-- Varianta 2
-- (trigger pe tabela mutating)
-- Trigger LMD la nivel de linie care sa nu permita ca un client sa aiba mai mult
-- de 2 comenzi.

create or replace trigger check_comenzi
    before insert or update of id_client on comenzi
    for each row
declare
    numar_comenzi number;
begin
    select count(*) into numar_comenzi
    from comenzi
    where id_client = :new.id_client;
    
    if numar_comenzi = 2 then
        raise_application_error(-20005,'Clientul are deja 2 comenzi in desfasurare!');
    end if;
end;
/
select * from clienti;
select * from comenzi;

-- nu se declanseaza triggerul deoarece clientul are 0 comenzi
insert into comenzi
values (secventa_techflow.nextval, sysdate, 'Noua', 72, 36, 42);

-- clientul are numarul maxim de comenzi
insert into comenzi
values (secventa_techflow.nextval, sysdate, 'Noua', 46, 38, 44);

-- eroare mutating
-- clientul are 0 comenzi dar insert into + select genereaza eroare
insert into comenzi
select secventa_techflow.nextval, sysdate, 'Noua', 73, 37, 42
from dual;

-- rezolvarea erorii de tabel mutating

create or replace package pachet_check_comenzi
as
    type com_rec_pachet is record ( id_client clienti.id_client%type,
                             numar_comenzi number(1));
    type com_idx is table of com_rec_pachet index by pls_integer;
    comenzi com_idx;
    contor number(1) :=0;
end;
/

create or replace trigger check_comenzi_comanda
    before insert or update of id_client on comenzi
begin
    pachet_check_comenzi.contor := 0;
    
    select id_client, count(*) bulk collect into pachet_check_comenzi.comenzi
    from comenzi
    group by id_client;
end;
/

create or replace trigger check_comenzi_linie
    before insert or update of id_client on comenzi
    for each row
begin
    for i in 1..pachet_check_comenzi.comenzi.last loop
        if pachet_check_comenzi.comenzi(i).numar_comenzi +
           pachet_check_comenzi.contor = 2
           and pachet_check_comenzi.comenzi(i).id_client = :new.id_client
        then
            raise_application_error(-20005,'Clientul are deja 2 comenzi in desfasurare!');
        end if;
    end loop;
    
    pachet_check_comenzi.contor := pachet_check_comenzi.contor + 1;
end;
/

alter trigger proiect.check_comenzi disable;

-- acum se declanseaza triggerul
insert into comenzi
select secventa_techflow.nextval, sysdate, 'Noua', 73, 37, 42
from dual;